install Helm the packeg manager for k8's which helps us in providing all the necessary componets to the k8 cluster like managing the deployements,monitoring stack using prometeous and graphana and adding multiple micro service deployements maintainance etc.
wget https://get.helm.sh/helm-v3.9.0-linux-amd64.tar.gz
tar -zxvf helm-v3.9.0-linux-amd64.tar.gz
sudo mv linux-amd64/helm /usr/local/bin/helm

verify the helm version 
helm version

creating the helm chart having all the files 
helm create myapp

Installing the tree to visualize the directory arrangement of the all folders 
apt install tree

create a new namespace 
kubectl create namespace helm-nginx

Verify if the name space is created or not 
kubectl get ns

Installing the created helm chart
helm install nginx-relese . -n helm-nginx

List all the helm releases in the particular namespace 
helm list -n helm-nginx

If you perform any changes to the any of the files and want to upgrade it like . if the replica count is modified to upgrade the release,
helm upgrade nginx-relese . -n helm-nginx
# helm upgrade relese-name /path/templates -n namespace 

stable repository is a collection of well-maintained, tested, and commonly used Helm charts for many open-source applications, like NGINX, Prometheus, MySQL, etc. By adding this repository, you're making it easy to install these applications into your Kubernetes cluster.
helm repo add stable https://charts.helm.sh/stable
helm repo add prometheus-community https://prometheus-community.github.io/helm-charts
helm search repo prometheus-community
kubectl create namespace prometheus
helm install stable prometheus-community/kube-prometheus-stack -n prometheus

Verify if the pods/svc are created and running or not 
kubectl get pods -n prometheus
kubectl get svc -n prometheus

Modify the svc to make them Nodeport as they are initially clusterip
kubectl edit svc stable-kube-prometheus-sta-prometheus -n prometheus
kubectl edit svc stable-grafana -n prometheus
kubectl get svc -n prometheus

User name of the dashboard will be admin and for password use the below command on the control plan it will return - prom-operator

kubectl --namespace prometheus get secrets stable-grafana -o jsonpath="{.data.admin-password}" | base64 -d ; echo

Now the nginx deployement and monitoring stack are in the place
Kubectl get all -n helm-nginx 

you will get the port on which the service is running use the nodeip:port to access the application here it is the nginx default page
same for the prometeous/grafana use the nodeip:ports the services deployed on 

Clusterip is used for with inthe cluster communication where as the Nodeip is for access the application out side when used nodeip it allocates a port for the application and using nodeip and port it transfers the request to the corresponding po that is handling the services you need to access

  
